clc; clear all; close all;

% Read input images
vis = im2double(imread("manWalkVB.jpg"));
ir = im2double(imread("manWalkIR.jpg"));

% Resize to match size
[rows, cols, ~] = size(vis);
ir = imresize(ir, [rows, cols]);

% Convert to grayscale if RGB
if size(vis,3) == 3
    vis = rgb2gray(vis);
end
if size(ir,3) == 3
    ir = rgb2gray(ir);
end

% Parameters
wname = 'db2';      % wavelet type
nLevels = 2;        % number of decomposition levels

% Perform multi-level wavelet decomposition
[vis_c, vis_s] = wavedec2(vis, nLevels, wname);
[ir_c, ir_s]   = wavedec2(ir,  nLevels, wname);

% Fuse approximation coefficients (average)
A_vis = appcoef2(vis_c, vis_s, wname, nLevels);
A_ir  = appcoef2(ir_c, ir_s, wname, nLevels);
A_fused = (A_vis + A_ir) / 2;

% Start with fused approximation
% C_fused = [];

% Reconstruct step-by-step from top level down
[H_vis, V_vis, D_vis] = detcoef2('all', vis_c, vis_s, 2);
[H_ir,  V_ir,  D_ir]  = detcoef2('all', ir_c, ir_s, 2);



% for i = nLevels:-1:1
%     % Extract detail coefficients from both images
%     [H_vis, V_vis, D_vis] = detcoef2('all', vis_c, vis_s, i);
%     [H_ir,  V_ir,  D_ir]  = detcoef2('all', ir_c, ir_s, i);
% 
%     % Fuse details using max-absolute rule
%     H_f = (abs(H_vis) > abs(H_ir)).*H_vis + (abs(H_vis) <= abs(H_ir)).*H_ir;
%     V_f = (abs(V_vis) > abs(V_ir)).*V_vis + (abs(V_vis) <= abs(V_ir)).*V_ir;
%     D_f = (abs(D_vis) > abs(D_ir)).*D_vis + (abs(D_vis) <= abs(D_ir)).*D_ir;
% 
%     % Reconstruct one level up
%     A_fused = idwt2(A_fused, H_f, V_f, D_f, wname);
% end

% Final fused image
fused_img = A_fused;

% Display results
figure;
subplot(1,3,1); imshow(vis, []); title('Visible Image');
subplot(1,3,2); imshow(ir, []); title('Infrared Image');
subplot(1,3,3); imshow(fused_img, []); title('Fused Image (Multi-Level)');